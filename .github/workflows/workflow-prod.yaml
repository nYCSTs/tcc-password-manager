name: Password Manager CI

on: pull_request

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Pensar se vamos manter
      # - name: Container up
      #   run: docker-compose up -d

      - name: Config GitHub
        run: |
          git config --global user.email "${{secrets.GIT_USER_EMAIL}}"
          git config --global user.name "${{secrets.GIT_USER_NAME}}"
  
      # NPM AUDIT
      # - name: run npm audit
      #   uses: oke-py/npm-audit-action@v2
      #   with:
      #     audit_level: low
      #     create_issues: true
      #     github_token: ${{ secrets.TOKEN_GIT }}
      #     issue_labels: vulnerability

      - name: install dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.TOKEN_GIT }}
        run: npm ci

      # TruffleHog OSS (13k estrelas)

      # GoSec Security Checker (7k estrelas)

      # Is WebSite Vulnerable (1.9k estrelas)

      # Stelligent CFN NAG (1.2k estrelas)

      # Snyk (500 estrelas)

      # Legitify Analize

      # SonarCloud Scan


      # CHECKMARX (46 estrelas)
      # - uses: actions/checkout@v2
      # - name: Checkmarx CxFlow Action
      #   uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.9
      #   with:
      #     project: ${{ github.repository }}-PR
      #     team: ${{ secrets.CHECKMARX_TEAMS }}
      #     checkmarx_url: ${{ secrets.CHECKMARX_URL }}
      #     checkmarx_username: ${{ secrets.CHECKMARX_USERNAME }}
      #     checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}
      #     checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
      #     scanners: sca
      #     break_build: true
      #     sca_api_url: ${{ secrets.SCA_API_URL }}
      #     sca_app_url: ${{ secrets.SCA_APP_URL }}
      #     sca_access_control_url: ${{ secrets.SCA_ACCESS_CONTROL_URL }}
      #     sca_tenant: ${{  secrets.SCA_TENANT }}
      #     sca_username: ${{ secrets.SCA_USERNAME }}

      # # OWASP DEPENDENCY CHECK (63 estrelas)
      # - name: Depcheck
      #   uses: dependency-check/Dependency-Check_Action@main
      #   id: Depcheck
      #   with:
      #     project: 'tcc-password-manager'
      #     path: './'
      #     format: 'HTML'
      #     out: 'reports'
      #     args: >
      #       --failOnCVSS 7
      #       --enableRetired
      # - name: Upload Test results
      #   uses: actions/upload-artifact@v4
      #   with:
      #      name: Depcheck report
      #      path:  ${{github.workspace}}/reports

      # - name: Save Results
      #   if: always()
      #   run: |
      #     git clone "https://x-access-token:${{secrets.TOKEN_GIT}}@github.com/tcc-lucas-dafne/${{secrets.NAME_REPO_GIT}}" ${{secrets.NAME_REPO_GIT}}
      #     mkdir -p ${{secrets.NAME_REPO_GIT}}/reports
      #     cp -R ${{github.workspace}}/reports ${{secrets.NAME_REPO_GIT}}/reports
      #     cd ${{secrets.NAME_REPO_GIT}}
      #     git add .
      #     git commit -m "Adicionando relat칩rio no reposit칩rio ${{ github.event.repository.name }} ${{ github.ref_name }}"
      #     git push

      # Gerar um "deploy" para a aplica칞칚o e adicionar a URL no target

      - name: Iniciar aplica칞칚o
        run: npm start
        env:
          PORT: ${{ github.job }} # Define a vari치vel de ambiente PORT para a porta em que a aplica칞칚o ser치 executada
    
      # ZAP (290 estrelas)
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          token: ${{ secrets.TOKEN_GIT }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:${{ env.PORT }}'
          cmd_options: '-a' #indica ataque ativo, onde o zap tenta atuar como um atacante em busca de vulnerabilidades

      - name: Upload ZAP Scan report
        uses: actions/upload-artifact@v4
        with:
          name: Zap Scan report
          path: ${{github.workspace}}/reports

      # - name: Save ZAP Scan Results
      #   run: |
      #     cp -R ${{github.workspace}}/reports ${{secrets.NAME_REPO_GIT}}/reports
      #     cd ${{secrets.NAME_REPO_GIT}}
      #     git add .
      #     git commit -m "Adicionando relat칩rio no reposit칩rio ${{ github.event.repository.name }} ${{ github.ref_name }}"
      #     git push
      - name: Save Results
        run: |
          git clone "https://x-access-token:${{secrets.TOKEN_GIT}}@github.com/tcc-lucas-dafne/${{secrets.NAME_REPO_GIT}}" ${{secrets.NAME_REPO_GIT}}
          mkdir -p ${{secrets.NAME_REPO_GIT}}/reports
          cp -R ${{github.workspace}}/reports ${{secrets.NAME_REPO_GIT}}/reports
          cd ${{secrets.NAME_REPO_GIT}}
          git add .
          git commit -m "Adicionando relat칩rio no reposit칩rio ${{ github.event.repository.name }} ${{ github.ref_name }}"
          git push

      # SQL MAP
      - name: Prepare environment
        run: |
          echo "START_DATE=$(date +'%d-%m-%YT%H-%M-%S-%Z')" >> $GITHUB_ENV
          echo "START_TIMESTAMP=$(date +'%s')" >> $GITHUB_ENV
          TMP_TARGET="XXXXXXXXXX"
          echo "TARGET=$TMP_TARGET" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Scan with sqlmap
        uses: thereisnotime/action-sqlmap@master
        with:
          url: ${{ env.TARGET }}
          additional_args: "--batch --crawl=2 --random-agent --forms --level=5 --risk=3"

      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: GitHub Actions
          author_email: 41898282+github-actions[bot]@users.noreply.github.com
          message: "游농 chore(sqlmap): add report for ${{ env.TARGET }}-${{ env.START_DATE }}-${{ env.START_TIMESTAMP }}"
          add: "./reports/web/*"
          pull: "--rebase --autostash"
